// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model TrialStart {
  id        String   @id @default(cuid())
  userId    String   @unique
  guildId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Configuration {
  id                       String  @id @default(cuid())
  guildId                  String  @unique
  trialRoleId              String?
  recruiterRoleId          String?
  memberRoleId             String?
  recruiterChannelId       String?
  lootSplitAuthRoleId      String?
  lootSplitPercentModifier Float?
  buybackPercentModifier   Float?
}

model LootSplitSession {
  id            String   @id @default(cuid())
  guildId       String
  silver        Int
  donated       Int
  screenshotUrl String   @db.Text // Changed to TEXT type for unlimited length
  participants  String?  @db.Text // List of user IDs separated by commas
  creatorId     String // ID of user who created the split
  approved      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RegearRequest {
  id        String   @id @default(cuid())
  userId    String
  guildId   String
  silver    Int
  reduced   Boolean  @default(false)
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PayoutAccount {
  id        String   @id @default(cuid())
  userId    String   @unique
  guildId   String
  balance   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AlbionItem {
  id          String   @id @default(cuid())
  itemId      String   @unique
  name        String
  tier        Int
  enchantment Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Composition {
  id        String   @id @default(cuid())
  guildId   String
  name      String
  userId    String
  roles     String   @db.Text // List of roles separated by commas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

model Event {
  id            String             @id @default(cuid())
  guildId       String
  userId        String
  name          String
  date          DateTime
  messageId     String?
  channelId     String?
  composition   Composition        @relation(fields: [compositionId], references: [id])
  compositionId String
  participants  EventParticipant[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model EventParticipant {
  id        String   @id @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  userId    String
  role      String // Role and index in the format "role:index"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
